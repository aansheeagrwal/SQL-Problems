# SQL Practice Questions from sql-practice.com

## ðŸŸ¡ Medium

Query1(medium):- Show unique birth years from patients and order them by ascending.

Solution:-
select distinct
year(birth_date) AS birth_year
from patients
order by year(birth_date)

Query2(medium):- Show unique first names from the patients table which only occurs once in the list.

For example, if two or more people are named 'John' in the first_name column then don't include their name in the output list. If only 1 person is named 'Leo' then include them in the output.

Solution:-
select first_name
from patients
group by first_name
having count(*) = 1

Query3(medium):- Show patient_id and first_name from patients where their first_name start and ends with 's' and is at least 6 characters long.

Solution:-
select first_name, patient_id
from patients
where LEN(first_name) >=6 
And lower(first_name) like 's%s'      
                                  (or)

SELECT
  patient_id,
  first_name
FROM patients
WHERE first_name LIKE 's____%s';
                                  (or)

SELECT
  patient_id,
  first_name
FROM patients
where
  first_name like 's%'
  and first_name like '%s'
  and len(first_name) >= 6;

Query4(medium):- Show patient_id, first_name, last_name from patients whos diagnosis is 'Dementia'.
Primary diagnosis is stored in the admissions table.

Solution:-
select p.patient_id,p.first_name,p.last_name
from admissions a
inner join patients p on p.patient_id=a.patient_id
where a.diagnosis = 'Dementia'

Query5(medium):- Display every patient's first_name.
Order the list by the length of each name and then by alphabetically.

Solution:-
select first_name
from patients
order by len(first_name), first_name


Query6(medium):- Show the total amount of male patients and the total amount of female patients in the patients table.
Display the two results in the same row.

Solution:-
select count(case when gender = 'M' then patient_id else null end) as male_count,
count(case when gender = 'F' then patient_id else null end) as female_count
from patients
                          (or)

SELECT 
  (SELECT count(*) FROM patients WHERE gender='M') AS male_count, 
  (SELECT count(*) FROM patients WHERE gender='F') AS female_count;
                          (or)

SELECT 
  SUM(Gender = 'M') as male_count, 
  SUM(Gender = 'F') AS female_count
FROM patients
                         (or)

select 
  sum(case when gender = 'M' then 1 end) as male_count,
  sum(case when gender = 'F' then 1 end) as female_count 
from patients;

Query7(medium):- Show first and last name, allergies from patients which have allergies to either 'Penicillin' or 'Morphine'. Show results ordered ascending by allergies then by first_name then by last_name.

Solution:-
select first_name,last_name,allergies
from patients
where allergies in ('Penicillin','Morphine')
order by allergies , first_name, last_name

                               (or)

SELECT
  first_name,
  last_name,
  allergies
FROM
  patients
WHERE
  allergies = 'Penicillin'
  OR allergies = 'Morphine'
ORDER BY
  allergies ASC,
  first_name ASC,
  last_name ASC;

Query8(medium):- Show patient_id, diagnosis from admissions. Find patients admitted multiple times for the same diagnosis.

Solution:-
select p.patient_id, a.diagnosis
from patients p
inner join admissions a on p.patient_id = a.patient_id
group by p.patient_id, a.diagnosis
having count(*)>1

                        (or)

SELECT
  patient_id,
  diagnosis
FROM admissions
GROUP BY
  patient_id,
  diagnosis
HAVING COUNT(*) > 1;

Query9(medium):- Show the city and the total number of patients in the city.Order from most to least patients and then by city name ascending.

Solution:-
select city, count(*) as no_of_patients
from patients 
group by city 
order by no_of_patients desc, city

                                  (or)

SELECT
  city,
  COUNT(*) AS num_patients
FROM patients
GROUP BY city
ORDER BY num_patients DESC, city asc;

Query10(medium):- Show first name, last name and role of every person that is either patient or doctor.
The roles are either "Patient" or "Doctor"

Solution:-
select first_name,last_name, 'patient' as role
from patients 
union all 
select first_name,last_name, 'Doctor' as role
from doctors
                                      (or)
SELECT first_name, last_name, 'Patient' as role FROM patients
    union all
select first_name, last_name, 'Doctor' from doctors;

Query11(medium):- Show all allergies ordered by popularity. Remove NULL values from query.

Solution:-
select allergies, count(*) as popularity
from patients 
where allergies is not null
group by allergies
order by popularity desc

                                (or)
SELECT
  allergies,
  COUNT(*) AS total_diagnosis
FROM patients
WHERE
  allergies IS NOT NULL
GROUP BY allergies
ORDER BY total_diagnosis DESC

Query12(medium):- Show all patient's first_name, last_name, and birth_date who were born in the 1970s decade. Sort the list starting from the earliest birth_date.

Solution:-
select first_name, last_name, birth_date
from patients 
where year(birth_date)>=1970 and year(birth_date)<1980
order by birth_date

                          (or)
SELECT
  first_name,
  last_name,
  birth_date
FROM patients
WHERE
  YEAR(birth_date) BETWEEN 1970 AND 1979
ORDER BY birth_date ASC;
                            
                            (or)
SELECT
  first_name,
  last_name,
  birth_date
FROM patients
WHERE
  birth_date >= '1970-01-01'
  AND birth_date < '1980-01-01'
ORDER BY birth_date ASC

                             (or)
SELECT
  first_name,
  last_name,
  birth_date
FROM patients
WHERE year(birth_date) LIKE '197%'
ORDER BY birth_date ASC

Query13(medium):- We want to display each patient's full name in a single column. Their last_name in all upper letters must appear first, then first_name in all lower case letters. Separate the last_name and first_name with a comma. Order the list by the first_name in decending order
EX: SMITH,jane

Solution:-
select concat(upper(last_name),',',lower(first_name))
from patients 
order by first_name desc

                              (or)
SELECT
  CONCAT(UPPER(last_name), ',', LOWER(first_name)) AS new_name_format
FROM patients
ORDER BY first_name DESC;

                              (or)
SELECT
  UPPER(last_name) || ',' || LOWER(first_name) AS new_name_format
FROM patients
ORDER BY first_name DESC;

Query14(medium):- Show the province_id(s), sum of height; where the total sum of its patient's height is greater than or equal to 7,000.

Solution:-
select province_id, sum(height) as total_height
from patients p 
group by province_id
having sum(height) >= 7000
                             (or)
SELECT
  province_id,
  SUM(height) AS sum_height
FROM patients
GROUP BY province_id
HAVING sum_height >= 7000
                            (or)
select * from (select province_id, SUM(height) as sum_height FROM patients group by province_id) where sum_height >= 7000;

Query15(medium):- Show the difference between the largest weight and smallest weight for patients with the last name 'Maroni'

Solution:-
select max(weight) - min(weight) as weight_delta1
from patients p 
where last_name = 'Maroni'
order by weight
                             (or)
SELECT
  (MAX(weight) - MIN(weight)) AS weight_delta
FROM patients
WHERE last_name = 'Maroni';

Query16(medium):- Show all of the days of the month (1-31) and how many admission_dates occurred on that day. Sort by the day with most admissions to least admissions.

Solutions:-
select day(admission_date), count(*) as total_admits
from admissions
group by day(admission_date)
order by total_admits desc

                            (or)
SELECT
  DAY(admission_date) AS day_number,
  COUNT(*) AS number_of_admissions
FROM admissions
GROUP BY day_number
ORDER BY number_of_admissions DESC

Query17(medium):- Show all columns for patient_id 542's most recent admission_date.

Solution:-
select *
from admissions
where patient_id = 542
order by admission_date desc
limit 1
                            (or)

SELECT *
FROM admissions
WHERE patient_id = 542
GROUP BY patient_id
HAVING
  admission_date = MAX(admission_date);

Query18(medium):- Show patient_id, attending_doctor_id, and diagnosis for admissions that match one of the two criteria:
1. patient_id is an odd number and attending_doctor_id is either 1, 5, or 19.
2. attending_doctor_id contains a 2 and the length of patient_id is 3 characters.

Solution:-
select patient_id, attending_doctor_id, diagnosis
from admissions
where (patient_id%2 = 1 and attending_doctor_id in (1,5,19))
or 
(len(patient_id)=3 and attending_doctor_id like '%2%')
                                           (or)
SELECT
  patient_id,
  attending_doctor_id,
  diagnosis
FROM admissions
WHERE
  (
    attending_doctor_id IN (1, 5, 19)
    AND patient_id % 2 != 0
  )
  OR 
  (
    attending_doctor_id LIKE '%2%'
    AND len(patient_id) = 3
  )

Query19(medium):- Show first_name, last_name, and the total number of admissions attended for each doctor.
Every admission has been attended by a doctor.

Solution:-
select d.first_name, d.last_name, count(*) as no_of_admissions
from admissions a 
inner join doctors d on a.attending_doctor_id = d.doctor_id
group by d.first_name, d.last_name

                                (or)
SELECT
  first_name,
  last_name,
  count(*) as admissions_total
from admissions a
  join doctors ph on ph.doctor_id = a.attending_doctor_id
group by attending_doctor_id
                                (or)
SELECT
  first_name,
  last_name,
  count(*)
from
  doctors p,
  admissions a
where
  a.attending_doctor_id = p.doctor_id
group by p.doctor_id;

Query20(medium):- For each doctor, display their id, full name, and the first and last admission date they attended.

Solution:-
select d.doctor_id, concat(d.first_name,' ', d.last_name) as full_name
,min(a.admission_date) as first_date, max(a.admission_date) as last_date
from admissions a 
inner join doctors d on a.attending_doctor_id = d.doctor_id
group by d.doctor_id, concat(d.first_name,' ',d.last_name)

                                     (or)

select
  doctor_id,
  first_name || ' ' || last_name as full_name,
  min(admission_date) as first_admission_date,
  max(admission_date) as last_admission_date
from admissions a
  join doctors ph on a.attending_doctor_id = ph.doctor_id
group by doctor_id;

Query21(medium):- Display the total amount of patients for each province. Order by descending.

Solution:-
select pn.province_name, count(*) as total_p
from patients p 
inner join province_names pn on p.province_id=pn.province_id
group by pn.province_name 
order by total_p desc
                            (or)
SELECT
  province_name,
  COUNT(*) as patient_count
FROM patients pa
  join province_names pr on pr.province_id = pa.province_id
group by pr.province_id
order by patient_count desc;

Query22(medium):- For every admission, display the patient's full name, their admission diagnosis, and their doctor's full name who diagnosed their problem.

Solution:-
select p.first_name || ' ' || p.last_name as patient_name, a.diagnosis, 
d.first_name || ' ' || d.last_name as doctor_name
from patients p 
inner join admissions a on p.patient_id=a.patient_id
inner join doctors d on a.attending_doctor_id=d.doctor_id

                                      (or)
SELECT
  CONCAT(patients.first_name, ' ', patients.last_name) as patient_name,
  diagnosis,
  CONCAT(doctors.first_name,' ',doctors.last_name) as doctor_name
FROM patients
  JOIN admissions ON admissions.patient_id = patients.patient_id
  JOIN doctors ON doctors.doctor_id = admissions.attending_doctor_id;

Query23(medium):- display the first name, last name and number of duplicate patients based on their first name and last name.
Ex: A patient with an identical name can be considered a duplicate.

Solution:-
select first_name, last_name, count(*) as no_of_duplicate
from patients p 
group by first_name, last_name
having count(*) > 1

                            (or)
select
  first_name,
  last_name,
  count(*) as num_of_duplicates
from patients
group by
  first_name,
  last_name
having count(*) > 1

Query24(medium):- Display patient's full name,
height in the units feet rounded to 1 decimal,
weight in the unit pounds rounded to 0 decimals,
birth_date,
gender non abbreviated.

Convert CM to feet by dividing by 30.48.
Convert KG to pounds by multiplying by 2.205.

Solution:-
select first_name ||' '|| last_name as full_name
, round(height/30.48,1) as height_feet
, round(weight * 2.205,0) as weight_pound
, birth_date
, case when gender = 'M' then 'MALE' else 'FEMALE' end as gender_type
from patients p 

                                    (or)
select
    concat(first_name, ' ', last_name) AS 'patient_name', 
    ROUND(height / 30.48, 1) as 'height "Feet"', 
    ROUND(weight * 2.205, 0) AS 'weight "Pounds"', birth_date,
CASE
	WHEN gender = 'M' THEN 'MALE' 
  ELSE 'FEMALE' 
END AS 'gender_type'
from patients

Query25(medium):- 
Show patient_id, first_name, last_name from patients whose does not have any records in the admissions table. (Their patient_id does not exist in any admissions.patient_id rows.)

Solution:-
select patient_id, first_name,last_name
from patients 
where patient_id not in (select patient_id from admissions

                                          (or)

SELECT
  patients.patient_id,
  first_name,
  last_name
from patients
where patients.patient_id not in (
    select admissions.patient_id
    from admissions
  )
                                           (or)

SELECT
  patients.patient_id,
  first_name,
  last_name
from patients
  left join admissions on patients.patient_id = admissions.patient_id
where admissions.patient_id is NULL

Query26(medium):- Display a single row with max_visits, min_visits, average_visits where the maximum, minimum and average number of admissions per day is calculated. Average is rounded to 2 decimal places.

Solution:-
with cte as (
select admission_date, count(*) as no_of_visits
from admissions
group by admission_date
)
select max(no_of_visits) as max_visits, min(no_of_visits) as min_visits
,round(avg(no_of_visits),2) as avg_visits
from cte

                                   (or)

select 
	max(number_of_visits) as max_visits, 
	min(number_of_visits) as min_visits, 
  round(avg(number_of_visits),2) as average_visits 
from (
  select admission_date, count(*) as number_of_visits
  from admissions 
  group by admission_date
)



## ðŸ”´ Hard


Query27(Hard):- Show all of the patients grouped into weight groups.
Show the total amount of patients in each weight group.
Order the list by the weight group decending.

For example, if they weight 100 to 109 they are placed in the 100 weight group, 110-119 = 110 weight group, etc.

Solution:-
select count(*) no_of_patients, floor(weight/10)*10 as weight_group
from patients
group by floor(weight/10)*10
order by weight_group desc

                                   (or)

SELECT
  COUNT(*) AS patients_in_group,
  FLOOR(weight / 10) * 10 AS weight_group
FROM patients
GROUP BY weight_group
ORDER BY weight_group DESC;
                                 
                                     (or)

SELECT
  TRUNCATE(weight, -1) AS weight_group,
  count(*)
FROM patients
GROUP BY weight_group
ORDER BY weight_group DESC;

                                       (or)

SELECT
  count(patient_id),
  weight - weight % 10 AS weight_group
FROM patients
GROUP BY weight_group
ORDER BY weight_group DESC

Query28(Hard):- Show patient_id, weight, height, isObese from the patients table.

Display isObese as a boolean 0 or 1.

Obese is defined as weight(kg)/(height(m)2) >= 30.

weight is in units kg.

height is in units cm.

Solution:-
select patient_id, weight, height,
case when (weight/((height/100.0)*(height/100.0)))>=30 then 1 else 0 end as isobese
from patients

                              (or)

SELECT patient_id, weight, height, 
  (CASE 
      WHEN weight/(POWER(height/100.0,2)) >= 30 THEN
          1
      ELSE
          0
      END) AS isObese
FROM patients;
-- If you divide an int by an int you will get an int. Dividing an int by a float will return a float.
-- That's why you have to divide by 100.0 and not 100.
-- Use CAST(variable_name AS FLOAT) function if you are dividing by two variables.

                                      (or)

SELECT
  patient_id,
  weight,
  height,
  weight / power(CAST(height AS float) / 100, 2) >= 30 AS obese
FROM patients

Query29(Hard):- Show patient_id, first_name, last_name, and attending doctor's specialty.
Show only the patients who has a diagnosis as 'Epilepsy' and the doctor's first name is 'Lisa'

Check patients, admissions, and doctors tables for required information.

Solution:-
select p.patient_id, p.first_name, p.last_name, 
d.specialty
from patients p
inner join admissions a on p.patient_id=a.patient_id
inner join doctors d on a.attending_doctor_id=d.doctor_id
where a.diagnosis = 'Epilepsy' and lower(d.first_name) = 'lisa'

                                       (or)

SELECT
  p.patient_id,
  p.first_name AS patient_first_name,
  p.last_name AS patient_last_name,
  ph.specialty AS attending_doctor_specialty
FROM patients p
  JOIN admissions a ON a.patient_id = p.patient_id
  JOIN doctors ph ON ph.doctor_id = a.attending_doctor_id
WHERE
  ph.first_name = 'Lisa' and
  a.diagnosis = 'Epilepsy'

                                    (or)

SELECT
  pa.patient_id,
  pa.first_name,
  pa.last_name,
  ph1.specialty
FROM patients AS pa
  JOIN (
    SELECT *
    FROM admissions AS a
      JOIN doctors AS ph ON a.attending_doctor_id = ph.doctor_id
  ) AS ph1 USING (patient_id)
WHERE
  ph1.diagnosis = 'Epilepsy'
  AND ph1.first_name = 'Lisa'

                                     (or)

SELECT
  a.patient_id,
  a.first_name,
  a.last_name,
  b.specialty
FROM
  patients a,
  doctors b,
  admissions c
WHERE
  a.patient_id = c.patient_id
  AND c.attending_doctor_id = b.doctor_id
  AND c.diagnosis = 'Epilepsy'
  AND b.first_name = 'Lisa';

                                         (or)

with patient_table as (
    SELECT
      patients.patient_id,
      patients.first_name,
      patients.last_name,
      admissions.attending_doctor_id
    FROM patients
      JOIN admissions ON patients.patient_id = admissions.patient_id
    where
      admissions.diagnosis = 'Epilepsy'
  )
select
  patient_table.patient_id,
  patient_table.first_name,
  patient_table.last_name,
  doctors.specialty
from patient_table
  JOIN doctors ON patient_table.attending_doctor_id = doctors.doctor_id
WHERE doctors.first_name = 'Lisa';

Query30(Hard):- All patients who have gone through admissions, can see their medical documents on our site. Those patients are given a temporary password after their first admission. Show the patient_id and temp_password.

The password must be the following, in order:
1. patient_id
2. the numerical length of patient's last_name
3. year of patient's birth_date

Solution:-
select p.patient_id,
concat(p.patient_id, len(p.last_name),year(p.birth_date)) as temp_patient
from patients p
where patient_id in (select patient_id from admissions)

                                     (or)

SELECT
  DISTINCT P.patient_id,
  CONCAT(
    P.patient_id,
    LEN(last_name),
    YEAR(birth_date)
  ) AS temp_password
FROM patients P
  JOIN admissions A ON A.patient_id = P.patient_id

                                     (or)

select
  distinct p.patient_id,
  p.patient_id || floor(len(last_name)) || floor(year(birth_date)) as temp_password
from patients p
  join admissions a on p.patient_id = a.patient_id

                                    (or)

select
  pa.patient_id,
  ad.patient_id || floor(len(pa.last_name)) || floor(year(pa.birth_date)) as temp_password
from patients pa
  join admissions ad on pa.patient_id = ad.patient_id
group by pa.patient_id;

Query31(Hard):- Each admission costs $50 for patients without insurance, and $10 for patients with insurance. All patients with an even patient_id have insurance.

Give each patient a 'Yes' if they have insurance, and a 'No' if they don't have insurance. Add up the admission_total cost for each has_insurance group.

Solution:-
select case when p.patient_id%2=0 then 'YES' else 'NO' end as has_insurance
, sum(case when p.patient_id%2=0 then 10 else 50 end) as cost
from patients p 
inner join admissions a on p.patient_id=a.patient_id
group by case when p.patient_id%2=0 then 'YES' ELSE 'NO' END

                                  (or)

SELECT 
CASE WHEN patient_id % 2 = 0 Then 
    'Yes'
ELSE 
    'No' 
END as has_insurance,
SUM(CASE WHEN patient_id % 2 = 0 Then 
    10
ELSE 
    50 
END) as cost_after_insurance
FROM admissions 
GROUP BY has_insurance;

                                       (or)

select 'No' as has_insurance, count(*) * 50 as cost
from admissions where patient_id % 2 = 1 group by has_insurance
union
select 'Yes' as has_insurance, count(*) * 10 as cost
from admissions where patient_id % 2 = 0 group by has_insurance

                                   (or)

SELECT
  has_insurance,
  CASE
    WHEN has_insurance = 'Yes' THEN COUNT(has_insurance) * 10
    ELSE count(has_insurance) * 50
  END AS cost_after_insurance
FROM (
    SELECT
      CASE
        WHEN patient_id % 2 = 0 THEN 'Yes'
        ELSE 'No'
      END AS has_insurance
    FROM admissions
  )
GROUP BY has_insurance

                                        (or)

select has_insurance,sum(admission_cost) as admission_total
from
(
   select patient_id,
   case when patient_id % 2 = 0 then 'Yes' else 'No' end as has_insurance,
   case when patient_id % 2 = 0 then 10 else 50 end as admission_cost
   from admissions
)
group by has_insurance

Query32(Hard):- 
Show the provinces that has more patients identified as 'M' than 'F'. Must only show full province_name

Solution:- 
with cte as (
select 
pn.province_name , count(*) as no_of_patients
,sum(case when gender = 'F' then 1 else 0 end) as female_count
,sum(case when gender = 'M' then 1 else 0 end) as male_count
from patients p 
inner join province_names pn on p.province_id=pn.province_id
group by pn.province_name
)
select province_name 
from cte
WHERE male_count > female_count;

                                    (or)

SELECT pr.province_name
FROM patients AS pa
  JOIN province_names AS pr ON pa.province_id = pr.province_id
GROUP BY pr.province_name
HAVING
  COUNT( CASE WHEN gender = 'M' THEN 1 END) > COUNT( CASE WHEN gender = 'F' THEN 1 END);

                                 (or)

SELECT province_name
FROM (
    SELECT
      province_name,
      SUM(gender = 'M') AS n_male,
      SUM(gender = 'F') AS n_female
    FROM patients pa
      JOIN province_names pr ON pa.province_id = pr.province_id
    GROUP BY province_name
  )
WHERE n_male > n_female

                                     (or)

SELECT pr.province_name
FROM patients AS pa
  JOIN province_names AS pr ON pa.province_id = pr.province_id
GROUP BY pr.province_name
HAVING
  SUM(gender = 'M') > SUM(gender = 'F');

                                 (or)

SELECT province_name
FROM patients p
  JOIN province_names r ON p.province_id = r.province_id
GROUP BY province_name
HAVING
  SUM(CASE WHEN gender = 'M' THEN 1 ELSE -1 END) > 0

                                   (or)

SELECT pr.province_name
FROM patients AS pa
  JOIN province_names AS pr ON pa.province_id = pr.province_id
GROUP BY pr.province_name
HAVING
  COUNT( CASE WHEN gender = 'M' THEN 1 END) > COUNT(*) * 0.5;

                                  (or)
SELECT province_name from province_names
WHERE province_id IN 
(SELECT province_id
FROM patients
group by province_id 
having SUM(gender = 'M') > SUM(gender = 'F'))

Query33(Hard):- We are looking for a specific patient. Pull all columns for the patient who matches the following criteria:
- First_name contains an 'r' after the first two letters.
- Identifies their gender as 'F'
- Born in February, May, or December
- Their weight would be between 60kg and 80kg
- Their patient_id is an odd number
- They are from the city 'Kingston'

Solution:-
select *
from patients
WHERE first_name LIKE '__r%'
and gender = 'F'
and month(birth_date) in (2,5,12)
and weight between 60 and 80
and patient_id%2 = 1
and lower(city) = 'kingston';
                              
                                 (or)

SELECT *
FROM patients
WHERE
  first_name LIKE '__r%'
  AND gender = 'F'
  AND MONTH(birth_date) IN (2, 5, 12)
  AND weight BETWEEN 60 AND 80
  AND patient_id % 2 = 1
  AND city = 'Kingston';

Query34(Hard):- Show the percent of patients that have 'M' as their gender. Round the answer to the nearest hundreth number and in percent form.

Solution:-
SELECT 
  CONCAT(ROUND(SUM(CASE WHEN gender = 'M' THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2), '%') AS male_percent
FROM patients;
                                      (or)
SELECT CONCAT(
    ROUND(
      (
        SELECT COUNT(*)
        FROM patients
        WHERE gender = 'M'
      ) / CAST(COUNT(*) as float),
      4
    ) * 100,
    '%'
  ) as percent_of_male_patients
FROM patients;

                                     (or)
SELECT
  round(100 * avg(gender = 'M'), 2) || '%' AS percent_of_male_patients
FROM
  patients;

                                    (or)

SELECT 
   CONCAT(ROUND(SUM(gender='M') / CAST(COUNT(*) AS float), 4) * 100, '%')
FROM patients;

Query35(Hard):- For each day display the total amount of admissions on that day. Display the amount changed from the previous date.

Solution:-
with cte as (
select admission_date, count(*) as total_admissions
from admissions
group by admission_date
)
select admission_date, total_admissions
,total_admissions - LAG(total_admissions,1) over(order by admission_date)
from cte

                                     (or)
SELECT
 admission_date,
 count(admission_date) as admission_day,
 count(admission_date) - LAG(count(admission_date)) OVER(ORDER BY admission_date) AS admission_count_change 
FROM admissions
 group by admission_date

                                (or)
WITH admission_counts_table AS (
  SELECT admission_date, COUNT(patient_id) AS admission_count
  FROM admissions
  GROUP BY admission_date
  ORDER BY admission_date DESC
)
select
  admission_date, 
  admission_count, 
  admission_count - LAG(admission_count) OVER(ORDER BY admission_date) AS admission_count_change 
from admission_counts_table

Query36(Hard):- Sort the province names in ascending order in such a way that the province 'Ontario' is always on top.

Solution:-
with cte as (
select province_name 
, case when province_name = 'Ontario' then 0 else 1 end as sort_flag
from province_names)
select province_name
from cte
order by sort_flag,province_name

                                 (or)

select province_name
from province_names
order by
  (case when province_name = 'Ontario' then 0 else 1 end),
  province_name

                                  (or)

select province_name
from province_names
order by
  (not province_name = 'Ontario'),
  province_name

                               (or)

select province_name
from province_names
order by
  province_name = 'Ontario' desc,
  province_name

                                  (or)
SELECT province_name
FROM province_names
ORDER BY
  CASE
    WHEN province_name = 'Ontario' THEN 1
    ELSE province_name
  END

Query37(Hard):- We need a breakdown for the total amount of admissions each doctor has started each year. Show the doctor_id, doctor_full_name, specialty, year, total_admissions for that year.

Solution:-
select d.doctor_id, d.first_name||' '||d.last_name as doctor_name
,d.specialty, year(admission_date) as admit_year
,count(*) as total_admissions
from admissions a 
inner join doctors d on a.attending_doctor_id=d.doctor_id
group by d.doctor_id, d.first_name||' '||d.last_name
,d.specialty, year(admission_date)

                                    (or)

SELECT
  d.doctor_id as doctor_id,
  CONCAT(d.first_name,' ', d.last_name) as doctor_name,
  d.specialty,
  YEAR(a.admission_date) as selected_year,
  COUNT(*) as total_admissions
FROM doctors as d
  LEFT JOIN admissions as a ON d.doctor_id = a.attending_doctor_id
GROUP BY
  doctor_name,
  selected_year
ORDER BY doctor_id, selected_year



## ðŸŸ¢ Easy

Query38(Easy):- Show first name, last name, and gender of patients whose gender is 'M'

Solution:-
SELECT first_name, last_name, gender
FROM patients
WHERE gender = 'M';

                                  (or)

SELECT
  first_name,
  last_name,
  gender
FROM patients
WHERE gender = 'M';

Query39(Easy):- Show first name and last name of patients who does not have allergies. (null)

Solution:-
SELECT first_name, last_name
FROM patients
WHERE allergies IS NULL;
                            (or)
SELECT
  first_name,
  last_name
FROM patients
WHERE allergies IS NULL;

Query40(Easy):-Show first name of patients that start with the letter 'C'

Solution:-
SELECT first_name
FROM patients
WHERE first_name LIKE 'C%';

                                 (or)

SELECT
  first_name
FROM
  patients
WHERE
  first_name LIKE 'C%'

Query41(Easy):- Show first name and last name of patients that weight within the range of 100 to 120 (inclusive)

Solution:-
SELECT first_name, last_name
FROM patients
WHERE weight BETWEEN 100 AND 120;

                                         (or)

SELECT
  first_name,
  last_name
FROM patients
WHERE weight BETWEEN 100 AND 120;

                                      (or)

SELECT
  first_name,
  last_name
FROM patients
WHERE weight >= 100 AND weight <= 120;

Query42(Easy):- Update the patients table for the allergies column. If the patient's allergies is null then replace it with 'NKA'

Solution:-
UPDATE patients
SET allergies = 'NKA'
WHERE allergies IS NULL;

Query43(Easy):- Show first name and last name concatinated into one column to show their full name.

Solution:-
SELECT CONCAT(first_name, ' ', last_name) AS full_name
FROM patients;

                                (or)

SELECT first_name + ' ' + last_name AS full_name
FROM patients;


                                    (or)

SELECT
  CONCAT(first_name, ' ', last_name) AS full_name
FROM patients;

                                    (or)

SELECT first_name || ' ' || last_name
FROM patients;

Query44(Easy):- Show first name, last name, and the full province name of each patient.

Example: 'Ontario' instead of 'ON'

Solution:-
SELECT 
  p.first_name, 
  p.last_name, 
  pn.province_name
FROM patients p
JOIN province_names pn ON p.province_id = pn.province_id;

Query45(Easy):- Show how many patients have a birth_date with 2010 as the birth year.

Solution:-
SELECT COUNT(*) AS total_patients_2010
FROM patients
WHERE YEAR(birth_date) = 2010;

                                     (or)

SELECT COUNT(*) AS total_patients
FROM patients
WHERE YEAR(birth_date) = 2010;

                                     (or)

SELECT count(first_name) AS total_patients
FROM patients
WHERE
  birth_date >= '2010-01-01'
  AND birth_date <= '2010-12-31'

                                    (or)

SELECT count(first_name) AS total_patients
FROM patients
WHERE
  birth_date between '2010-01-01' AND '2010-12-31'

                                     (or)

SELECT COUNT(*) AS total_patients_2010
FROM patients
WHERE EXTRACT(YEAR FROM birth_date) = 2010;

Query46(Easy):- Show the first_name, last_name, and height of the patient with the greatest height.

solution:-
SELECT first_name, last_name, height
FROM patients
WHERE height = (SELECT MAX(height) FROM patients);
                                                     (or)

SELECT first_name, last_name, height
FROM patients
ORDER BY height DESC
LIMIT 1;

                                           (or)
SELECT TOP 1 first_name, last_name, height
FROM patients
ORDER BY height DESC;

                                      (or)
SELECT
  first_name,
  last_name,
  height
FROM patients
WHERE height = (
    SELECT max(height)
    FROM patients
  )
                                    (or)

SELECT
  first_name,
  last_name,
  MAX(height) AS height
FROM patients;
// May not be supported in every sql language.

Query47(Easy):- Show all columns for patients who have one of the following patient_ids:
1,45,534,879,1000

Solution:-
SELECT *
FROM patients
WHERE patient_id IN (1, 45, 534, 879, 1000);

Query48(Easy):- Show the total number of admissions

Solution:-
SELECT COUNT(*) AS total_admissions
FROM admissions;

Query49(Easy):- Show all the columns from admissions where the patient was admitted and discharged on the same day.

Solution:-
SELECT *
FROM admissions
WHERE admission_date = discharge_date;

Query50(Easy):- Show the patient id and the total number of admissions for patient_id 579.

Solution:-
SELECT patient_id, COUNT(*) AS total_admissions
FROM admissions
WHERE patient_id = 579
GROUP BY patient_id;

Query51(Easy):- Based on the cities that our patients live in, show unique cities that are in province_id 'NS'.

Solution:-
SELECT DISTINCT city
FROM patients
WHERE province_id = 'NS';
                            (or)
SELECT city
FROM patients
GROUP BY city
HAVING province_id = 'NS';
                            (or)
SELECT DISTINCT(city) AS unique_cities
FROM patients
WHERE province_id = 'NS';

Query52(Easy):- Write a query to find the first_name, last name and birth date of patients who has height greater than 160 and weight greater than 70

Solution:-
SELECT first_name, last_name, birth_date
FROM patients
WHERE height > 160 AND weight > 70;

                                    (or)

SELECT first_name, last_name, birth_date FROM patients
WHERE height > 160 AND weight > 70;

Query53(Easy):- Write a query to find list of patients first_name, last_name, and allergies where allergies are not null and are from the city of 'Hamilton'

solution:-
SELECT first_name, last_name, allergies
FROM patients
WHERE allergies IS NOT NULL
  AND city = 'Hamilton';
                                     (or)

SELECT
  first_name,
  last_name,
  allergies
FROM patients
WHERE
  city = 'Hamilton'
  and allergies is not null














